/********* Sample code generated by the curl command line tool **********
 * All curl_easy_setopt() options are documented at:
 * http://curl.haxx.se/libcurl/c/curl_easy_setopt.html
 ************************************************************************/
#include <curl/curl.h>
#include <cstring>
#include <fstream>
#include <iostream>
#include <iterator>
#include <fstream>
#include <omp.h>
#include <string>
#include <vector>

using std::istream_iterator;
using std::copy;
using std::vector;
using std::string;

using namespace std;

CURLcode retrieve(CURL *hnd, char* address, string &outputdata){
  CURLcode ret;

  curl_easy_setopt(hnd, CURLOPT_URL, address);
  curl_easy_setopt(hnd, CURLOPT_WRITEDATA, &outputdata);
  ret = curl_easy_perform(hnd);
  return ret;
}

vector<string> readfile(char* filepath){
  vector<string> DataArray;
  ifstream iplist(filepath);
  copy(istream_iterator<string>(iplist),
         istream_iterator<string>(),
         back_inserter(DataArray));

  return DataArray;
}

size_t CurlWrite_CallbackFunc_StdString(void *contents, size_t size, size_t nmemb, std::string *s)
{
    size_t newLength = size*nmemb;
    size_t oldLength = s->size();
    try
    {
        s->resize(oldLength + newLength);
    }
    catch(std::bad_alloc &e)
    {
        //handle memory problem
        return 0;
    }

    std::copy((char*)contents,(char*)contents+newLength,s->begin()+oldLength);
    return size*nmemb;
}

int main(int argc, char *argv[])
{
  CURLcode ret;
  CURL *hnd;
  vector<string> iplist;
  char target[] = "209.85.202.139";
  char ifile[] = "iplist.txt";
  iplist = readfile(ifile);
  std::cout << "\n" << iplist.size() << '\n';


  hnd = curl_easy_init();
  curl_easy_setopt(hnd, CURLOPT_NOPROGRESS, 1L);
  curl_easy_setopt(hnd, CURLOPT_NOBODY, 1L);
  curl_easy_setopt(hnd, CURLOPT_HEADER, 1L);
  curl_easy_setopt(hnd, CURLOPT_TIMEOUT_MS, 10000L);
  curl_easy_setopt(hnd, CURLOPT_USERAGENT, "curl/7.47.0");
  curl_easy_setopt(hnd, CURLOPT_MAXREDIRS, 50L);
  curl_easy_setopt(hnd, CURLOPT_FILETIME, 1L);
  curl_easy_setopt(hnd, CURLOPT_CONNECTTIMEOUT_MS, 2000L);
  curl_easy_setopt(hnd, CURLOPT_TCP_KEEPALIVE, 1L);
  curl_easy_setopt(hnd, CURLOPT_WRITEFUNCTION, CurlWrite_CallbackFunc_StdString);

  /* Here is a list of options the curl code used that cannot get generated
     as source easily. You may select to either not use them or implement
     them yourself.

  CURLOPT_WRITEDATA set to a objectpointer
  CURLOPT_WRITEFUNCTION set to a functionpointer
  CURLOPT_READDATA set to a objectpointer
  CURLOPT_READFUNCTION set to a functionpointer
  CURLOPT_SEEKDATA set to a objectpointer
  CURLOPT_SEEKFUNCTION set to a functionpointer
  CURLOPT_ERRORBUFFER set to a objectpointer
  CURLOPT_STDERR set to a objectpointer
  CURLOPT_HEADERFUNCTION set to a functionpointer
  CURLOPT_HEADERDATA set to a objectpointer

  */
  int listsize = iplist.size();
  #pragma omp parallel for
  for(int i=0; i < listsize; i++)
  {
    string output;
    string listitem = iplist.at(i);
    char *address = strdup(listitem.c_str());
    std::cout << address << '\n';
    ret = retrieve(hnd, address, output);

    #pragma omp critical
  	std::cout << output << '\n';
  }

  string output;
  ret = retrieve(hnd, target, output);
  std::cout << output;

  curl_easy_cleanup(hnd);
  hnd = NULL;

  return (int)ret;
}
/**** End of sample code ****/
